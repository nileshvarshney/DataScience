geom_histogram(aes(months_loan_duration) , fill = "blue") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loans")
summary(credit$months_loan_duration)
ggplot(data = credit) +
geom_histogram(aes(months_loan_duration) , fill = "blue") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loan Accounts")
summary(credit$months_loan_duration)
ggplot(data = credit) +
geom_histogram(aes(months_loan_duration) , fill = "blue") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "red") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "red") +
# scale_x_continuous(name = "Loan Duration (Months)",
#                    breaks = seq(0,72,3),
#                    limits = c(0,72)) +
# scale_y_continuous(name = "No of Loan Accounts") +
# ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "red")
# scale_x_continuous(name = "Loan Duration (Months)",
#                    breaks = seq(0,72,3),
#                    limits = c(0,72)) +
# scale_y_continuous(name = "No of Loan Accounts") +
# ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange")
# scale_x_continuous(name = "Loan Duration (Months)",
#                    breaks = seq(0,72,3),
#                    limits = c(0,72)) +
# scale_y_continuous(name = "No of Loan Accounts") +
# ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange") +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 10) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 20) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 50) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 100) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit) +
geom_point(aes(age,amount))
ggplot(data = credit) +
geom_point(aes(age,amount),jitter = 1/10)
ggplot(data = credit) +
geom_point(aes(age,amount),jitter = 1/100)
ggplot(data = credit) +
geom_point(aes(age,amount),jitter = 1/100) + geom_jitter(1/10)
ggplot(data = credit) +
geom_point(aes(age,amount))
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/100)
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/10)
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5)
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(0,quantile(credit$age,0.99))
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
xlim(0,quantile(credit$amount,0.99))
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
ylim(0,quantile(credit$amount,0.99))
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
ylim(0,quantile(credit$amount,0.99))
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
ylim(0,quantile(credit$amount,0.99)) +
xlab("Age") +
ylab(" Loan Amount") +
ggtitle("Age Wise Loan excludes top 1% from age and amounts")
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test <- credit[-train.sample,]
rm(test)
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
head(train.set)
head(test.set)
nrow(test.set)
nrow(train.set)
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
table(train.set$default,test.set$default)
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default)
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
set.seed(2015)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
set.seed(2015)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
set.seed(123)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
set.seed(2000)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
set.seed(2017)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
library(C50)
model <- C5.0(train.set[-17],train.set$default)
model <- C5.0(train.set[-17],train.set$default)
summary(model)
set.seed(123)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
model <- C5.0(train.set[-17],train.set$default)
summary(model)
```{r}
model <- C5.0.default(train.set[-17],train.set$default)
summary(model)
test.predict <- predict(model,test.set)
library(C50)
library(gmodels)
test.predict <- predict(model,test.set)
CrossTable(test.predict,test.set$default,
dnn =c("Predicted Resulr","Actual Result"))
test.predict <- predict(model,test.set)
CrossTable(test.predict,test.set$default,
dnn =c("Predicted Result","Actual Result"))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
summary(model)
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,rules = TRUE)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 20)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 8)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 6)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 12)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(winnow = TRUE))
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = FALSE))
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = TRUE))
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = FALSE,earlyStopping = = TRUE))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = FALSE,
earlyStopping = = TRUE))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = FALSE,
earlyStopping = TRUE))
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,
control = C5.0Control(noGlobalPruning = FALSE,
earlyStopping = FALSE))
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.predict_10,test.set$default,
dnn =c("Predicted Result","Actual Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
error_cost = matrix(c(0,1,4,0),nrow = 2)
error_cost = matrix(c(0,1,4,0),nrow = 2)
error_cost
matrix_diam <- (c("no","yes"),c("no","yes"))
matrix_diam <- list(c("no","yes"),c("no","yes"))
error_cost = matrix(c(0,1,4,0),nrow = 2)
error_cost
matrix_diam <- list(c("no","yes"),c("no","yes"))
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2)
error_cost
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2)
error_cost
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2,dianame = matrix_diam)
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2,diamname = matrix_diam)
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,4,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,5,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,3,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
rm(list = ls())
gc()
setwd("~/Google Drive/Gits/DataScience/Models/Credit")
library(ggplot2)
credit <- read.csv("credit.csv")
str(credit)
table(credit$checking_balance)
table(credit$credit_history)
table(credit$other_credit)
table(credit$housing)
table(credit$job)
table(credit$phone)
table(credit$default)
summary(credit$months_loan_duration)
ggplot(data = credit) +
geom_histogram(aes(months_loan_duration) , fill = "blue") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 100) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
ylim(0,quantile(credit$amount,0.99)) +
xlab("Age") +
ylab(" Loan Amount") +
ggtitle("Age Wise Loan excludes top 1% from age and amounts")
set.seed(123)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
library(C50)
library(gmodels)
model <- C5.0(train.set[-17],train.set$default)
summary(model)
test.predict <- predict(model,test.set)
CrossTable(test.predict,test.set$default,
dnn =c("Predicted Result","Actual Result"))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,3,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
