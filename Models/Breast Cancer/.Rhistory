cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
count
#eff <- (100 * count)/nrow(actual.predict)
#eff
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
#eff
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
#eff
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
eff
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model is " + eff)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model is " , eff)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model is " , round(eff,2))
k_test <- function ( k = 1){
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
rm(actual.predict)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , k ," is " , round(eff,2))
}
for(i in (1:sqrt(nrow(train.)))){
k_test(i)
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(i)
}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 3)
#}
k_test <- function ( k = 1){
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
if exists(actual.predict){
exists(actual.predict)
k_test <- function ( k = 1){
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = 3)
# if exists(actual.predict){
#   rm(actual.predict)
# }
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , k ," is " , round(eff,2))
}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 3)
#}
for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 3)
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = i)
}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 4)
#}
k_test <- function ( k = 1){
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = k)
# if exists(actual.predict){
#   rm(actual.predict)
# }
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , k ," is " , round(eff,2))
}
k_test <- function ( k = 1){
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = k)
# if exists(actual.predict){
#   rm(actual.predict)
# }
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , k ," is " , round(eff,2))
}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 4)
#}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 5)
#}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
k_test(k = 7)
#}
#for(i in (1:sqrt(nrow(train.set.normalize)))){
#k_test(i)
k_test(8)
#}
for(i in (1:sqrt(nrow(train.set.normalize)))){
#k_test(i)
k_test(8)
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
#k_test(i)
k_test(i)
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
i
#k_test(i)
# k_test(i)
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
i
#k_test(i)
# k_test(i)
}
k_test <- function ( j = 1){
print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
}
for(i in (1:sqrt(nrow(train.set.normalize)))){
i
#k_test(i)
# k_test(i)
}
for(i in (1:10)){
i
}
for(i in (1:10)){
print(i)
}
for(i in (1:10)){
print(i)
}
for(i in (1:10)){
print(eff)
}
for(i in (1:10)){
k_test(i)
print(eff)
}
for(i in (1:10)){
k_test(j = i)
print(eff)
}
for(i in (1:10)){
k_test(j = i)
print(eff)
}
for(i in (1:10)){
k_test(j = i)
print(eff)
}
for(i in (1:10)){
k_test(j = i)
print0(eff)
}
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
#paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
return(eff)
}
k_test(12)
k_test(sqrt(nrow(train.set.normalize)))
k_test(sqrt(nrow(train.set.normalize)))
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
#return(eff)
}
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test(sqrt(nrow(train.set.normalize))- 3)
k_test((1:round(sqrt(nrow(train.set.normalize))))
k_test((for i %in% 1:round(sqrt(nrow(train.set.normalize))))
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
k_test(k)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
print(k_test(k))
}
library(class)  # Package for KNN
library(gmodels)
nrow(train.set[2])
nrow(train.set[-c(1,2)])
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
#return(eff)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
print(k_test(k))
}
# nrow(train.set[2])
# nrow(train.set[-c(1,2)])
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , round(k_test(k),2))
print(k_test(k))
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print(k_test(k))
}
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
#paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
#return(eff)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print(k_test(k))
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
#print(k_test(k))
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print0(k_test(k) " ======> ")
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print0(k_test(k), " ======> ")
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
# paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
paste0(k_test(k), " ======> ")
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
# paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
paste0(k_test(k), " ======> ")
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
# paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
paste(k_test(k), " ======> ")
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
# paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print(k_test(k), " ======> ")
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
# paste0("Efficiency of KNN model for K " , k ," is " , k_test(k))
print(k_test(k))
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
k_test(k)
#  print(k_test(k))
}
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
return(eff)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
k_test(k)
#  print(k_test(k))
}
k_test <- function ( j = 1){
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
#return(eff)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
k_test(k)
#  print(k_test(k))
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
#k_test(k)
print(k_test(k))
}
k_test(10))
k_test(10)
k_test(10)
CrossTable(actual.predict$actual,actual.predict$predicted)
k_test <- function ( j = 1){
set.seed(2017)
#print0(" K value is ", j)
model.knn <- knn(train.set.normalize[,-31],
test.set.normalize[,-31],
cl = train.set.normalize[,31],
k = j)
actual.predict <- data.frame(predicted = model.knn)
actual.predict$actual <- test.set.normalize[,31]
count <- 0;
for (i in (1:nrow(actual.predict))){
count  = sum(ifelse(actual.predict$actual == actual.predict$predicted,1,0 ))
}
# actual.predict
# count
eff <- (100 * count)/nrow(actual.predict)
paste0("Efficiency of KNN model for K " , j ," is " , round(eff,2))
#return(eff)
}
for (k in (1:round(sqrt(nrow(train.set.normalize))))){
#k_test(k)
print(k_test(k))
}
k_test(12)
CrossTable(actual.predict$actual,actual.predict$predicted)
