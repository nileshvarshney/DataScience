titanic.full$Family <- ifelse((titanic.full$Parch + titanic.full$SibSp) > 0,1,0)
titanic.full <- subset(titanic.full,select = -c(SibSp,Parch,Name))
titanic.full$Cabin <-substr(titanic.full$Cabin,1,1)
titanic.full$Cabin <-ifelse(titanic.full$Cabin =='',"X",titanic.full$Cabin)  # No Cabin (X)
titanic.full$Embarked <-as.factor(ifelse(as.character(titanic.full$Embarked) =="","S",as.character(titanic.full$Embarked)))
titanic.train.clean <- titanic.full[1:891,]
titanic.test.clean <- titanic.full[892:1309,]
titanic.test.clean <- titanic.test.clean[,!(names(titanic.test.clean) %in% c("Survived"))]
round(prop.table(table(titanic.train.clean$Survived)),2) # 38% servived
round(prop.table(table(titanic.train.clean$Sex)),2)  # 35/65
round(prop.table(table(titanic.train.clean$Survived,titanic.train.clean$Sex)),2)
library(ggplot2)
ggplot(data = titanic.train.clean,aes(x = Age)) +
geom_histogram(aes(fill = as.factor(Survived)),binwidth = 2) +
facet_wrap(~ Sex)
round(prop.table(table(titanic.train.clean$Pclass)),2)
round(prop.table(table(titanic.train.clean$Survived,titanic.train.clean$Pclass)),2)
ggplot(data = titanic.train.clean,aes(x = Age)) +
geom_histogram(aes(fill = as.factor(Survived)),binwidth = 2) +
facet_wrap(~ Pclass)
round(prop.table(table(titanic.train.clean$Cabin)),2)
round(prop.table(table(titanic.train.clean$Survived,titanic.train.clean$Cabin)),2)
round(prop.table(table(titanic.train.clean$Embarked)),2)
round(prop.table(table(titanic.train.clean$Survived,titanic.train.clean$Embarked)),2)
ggplot(data = titanic.train.clean,aes(x = Age)) +
geom_histogram(aes(fill = as.factor(Survived)),binwidth = 2) +
facet_wrap(~ Embarked)
round(prop.table(table(titanic.train.clean$Family)),2)
round(prop.table(table(titanic.train.clean$Survived,titanic.train.clean$Family)),2)
ggplot(data = titanic.train.clean,aes(x = Age)) +
geom_histogram(aes(fill = as.factor(Survived)),binwidth = 2) +
facet_wrap(~ Family)
#library(C50)
#model <- C5.0(titanic.train.clean[-2],titanic.train.clean[2])
#model
library(C50)
model <- C5.0(titanic.train.clean[-2],titanic.train.clean[2])
model <- C5.0(titanic.train.clean[-2],as.factor(titanic.train.clean[2]))
titanic.train.clean$Survived <- as.factor(titanic.train.clean$Survived)
model <- C5.0(titanic.train.clean[-2],as.factor(titanic.train.clean[2]))
model <- C5.0(titanic.train.clean[-2],as.list(titanic.train.clean[2]))
model <- C5.0(titanic.train.clean[-2],titanic.train.clean$Survived)
model
View(titanic.test.clean)
model <- C5.0(titanic.train.clean[-2],titanic.train.clean$Survived)
model
summary(model)
titanic.train.clean[-c(2,6,7]
titanic.train.clean[-c(2,6,7)]
model <- C5.0(titanic.train.clean[-c(2,6,7)],titanic.train.clean$Survived)
model
summary(model)
install.packages("rpart")
library(rpart)
library(rpart)
train.model <- rpart(Survived ~ Pclass + Sex + Age + Family + Fare + Embarked,
data = titanic.train.clean,
method = "class",
control = rpart.control(minsplit = 50, cp = 0))
?fancyRpartPlot
train.model
plot(train.model)
library(rpart)
train.model <- rpart(Survived ~ Pclass + Sex + Age + Family + Fare + Embarked,
data = titanic.train.clean,
method = "class",
control = rpart.control(minsplit = 50, cp = 0))
plot.r
library(rpart)
train.model <- rpart(Survived ~ Pclass + Sex + Age + Family + Fare + Embarked,
data = titanic.train.clean,
method = "class",
control = rpart.control(minsplit = 50, cp = 0))
library(rpart.plot)
library(rpart)
train.model <- rpart(Survived ~ Pclass + Sex + Age + Family + Fare + Embarked,
data = titanic.train.clean,
method = "class",
control = rpart.control(minsplit = 50, cp = 0))
library(rpart.plot)
rpart.plot(train.model)
library(rpart.plot)
rpart.plot(train.model)
library(rpart.plot)
rpart.plot(train.model)
fancyRpartPlot(my_dt2)
library(rpart)
train.model <- rpart(Survived ~ Pclass + Sex + Age + Family + Fare + Embarked +Cabin,
data = titanic.train.clean,
method = "class",
control = rpart.control(minsplit = 50, cp = 0))
library(rpart.plot)
rpart.plot(train.model)
pred <- predict(train.model, newdata = titanic.test.clean, type = "class")
#my_solution <- data.frame(PassengerId = test2$PassengerId, Survived = my_prediction)
#nrow(my_solution)
pred
str(pred)
head(pred)
head(titanic.test.clean)
titanic.train <- read.csv("train.csv")
titanic.test <- read.csv(("test.csv"))
test <- titanic.test
test$Survived <- NA
test1 <- test %>% select(PassengerId,Survived,Pclass:Embarked)
titanic.full <- rbind(titanic.train,test1)
rm(test1)
rm(test)
summary(titanic.full)
titanic.full$Fare <- ifelse(is.na(titanic.full$Fare),
mean(titanic.full$Fare,na.rm = TRUE),
titanic.full$Fare)
titanic.full$Age <- ifelse(
is.na(titanic.full$Age),
median(titanic.full$Age,na.rm = TRUE),
titanic.full$Age
)
titanic.full$SibSp <- ifelse(titanic.full$SibSp > 0, 1,0)
titanic.full$Parch <- ifelse(titanic.full$Parch > 0, 1,0)
titanic.full$Family <- ifelse((titanic.full$Parch + titanic.full$SibSp) > 0,1,0)
titanic.full <- subset(titanic.full,select = -c(SibSp,Parch,Name))
titanic.full$Cabin <-substr(titanic.full$Cabin,1,1)
titanic.full$Cabin <-ifelse(titanic.full$Cabin =='',"X",titanic.full$Cabin)  # No Cabin (X)
titanic.full$Embarked <-as.factor(ifelse(as.character(titanic.full$Embarked) =="","S",as.character(titanic.full$Embarked)))
titanic.train <- read.csv("train.csv")
titanic.test <- read.csv(("test.csv"))
library(dplyr)
titanic.train <- read.csv("train.csv")
titanic.test <- read.csv(("test.csv"))
test <- titanic.test
test$Survived <- NA
test1 <- test %>% select(PassengerId,Survived,Pclass:Embarked)
titanic.full <- rbind(titanic.train,test1)
rm(test1)
rm(test)
summary(titanic.full)
titanic.full$Fare <- ifelse(is.na(titanic.full$Fare),
mean(titanic.full$Fare,na.rm = TRUE),
titanic.full$Fare)
titanic.full$Age <- ifelse(
is.na(titanic.full$Age),
median(titanic.full$Age,na.rm = TRUE),
titanic.full$Age
)
titanic.full$SibSp <- ifelse(titanic.full$SibSp > 0, 1,0)
titanic.full$Parch <- ifelse(titanic.full$Parch > 0, 1,0)
titanic.full$Family <- ifelse((titanic.full$Parch + titanic.full$SibSp) > 0,1,0)
titanic.full <- subset(titanic.full,select = -c(SibSp,Parch,Name))
titanic.full$Cabin <-substr(titanic.full$Cabin,1,1)
titanic.full$Cabin <-ifelse(titanic.full$Cabin =='',"X",titanic.full$Cabin)  # No Cabin (X)
titanic.full$Embarked <-as.factor(ifelse(as.character(titanic.full$Embarked) =="","S",as.character(titanic.full$Embarked)))
summary(titanic.full)
str(titanic.full)
titanic.full$SibSp <- ifelse(titanic.full$SibSp > 0, 1,0)
titanic.full$Age <- ifelse(
is.na(titanic.full$Age),
median(titanic.full$Age,na.rm = TRUE),
titanic.full$Age
)
titanic.full$SibSp <- ifelse(titanic.full$SibSp > 0, 1,0)
library(dplyr)
titanic.train <- read.csv("train.csv")
titanic.test <- read.csv(("test.csv"))
test <- titanic.test
test$Survived <- NA
test1 <- test %>% select(PassengerId,Survived,Pclass:Embarked)
titanic.full <- rbind(titanic.train,test1)
rm(test1)
rm(test)
summary(titanic.full)
titanic.full$Fare <- ifelse(is.na(titanic.full$Fare),
mean(titanic.full$Fare,na.rm = TRUE),
titanic.full$Fare)
titanic.full$Age <- ifelse(
is.na(titanic.full$Age),
median(titanic.full$Age,na.rm = TRUE),
titanic.full$Age
)
titanic.full$SibSp <- ifelse(titanic.full$SibSp > 0, 1,0)
titanic.full$Parch <- ifelse(titanic.full$Parch > 0, 1,0)
titanic.full$Family <- ifelse((titanic.full$Parch + titanic.full$SibSp) > 0,1,0)
titanic.full <- subset(titanic.full,select = -c(SibSp,Parch,Name))
titanic.full$Cabin <-substr(titanic.full$Cabin,1,1)
titanic.full$Cabin <-ifelse(titanic.full$Cabin =='',"X",titanic.full$Cabin)  # No Cabin (X)
titanic.full$Embarked <-as.factor(ifelse(as.character(titanic.full$Embarked) =="","S",as.character(titanic.full$Embarked)))
titanic.train.clean <- titanic.full[1:891,]
titanic.test.clean <- titanic.full[892:1309,]
titanic.test.clean <- titanic.test.clean[,!(names(titanic.test.clean) %in% c("Survived"))]
titanic.train.clean <- titanic.full[1:891,]
titanic.test.clean <- titanic.full[892:1309,]
titanic.test.clean <- titanic.test.clean[,!(names(titanic.test.clean) %in% c("Survived"))]
setwd("~/Google Drive/Gits/DataScience/Models/Credit")
rm(list = ls())
gc()
setwd("~/Google Drive/Gits/DataScience/Models/Credit")
library(ggplot2)
credit <- read.csv("credit.csv")
str(credit)
table(credit$checking_balance)
table(credit$credit_history)
table(credit$other_credit)
table(credit$housing)
table(credit$job)
table(credit$phone)
table(credit$default)
summary(credit$months_loan_duration)
ggplot(data = credit) +
geom_histogram(aes(months_loan_duration) , fill = "blue") +
scale_x_continuous(name = "Loan Duration (Months)",
breaks = seq(0,72,3),
limits = c(0,72)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Month Duration Counts")
ggplot(data = credit) +
geom_histogram(aes(amount) , fill = "orange",binwidth = 100) +
scale_x_continuous(name = "Loan Amount",
breaks = seq(0,15000,1000),
limits = c(0,15000)) +
scale_y_continuous(name = "No of Loan Accounts") +
ggtitle("Loan Amount wise Counts")
ggplot(data = credit,aes(age,amount)) +
geom_point(alpha = 1/5) +
xlim(18,quantile(credit$age,0.99)) +
ylim(0,quantile(credit$amount,0.99)) +
xlab("Age") +
ylab(" Loan Amount") +
ggtitle("Age Wise Loan excludes top 1% from age and amounts")
set.seed(123)
train.sample = sample(1000,900)
train.set <- credit[train.sample,]
test.set <- credit[-train.sample,]
prop.table(table(train.set$default))  ## training set propotion
prop.table(table(test.set$default))  ## test set propotion
library(C50)
library(gmodels)
model <- C5.0(train.set[-17],train.set$default)
summary(model)
test.predict <- predict(model,test.set)
CrossTable(test.predict,test.set$default,
dnn =c("Predicted Result","Actual Result"))
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
matrix_diam <- list(c("no","yes"),c("no","yes"))
names(matrix_diam) = c("predicted","actual")
matrix_diam
error_cost = matrix(c(0,1,3,0),nrow = 2,dimnames  = matrix_diam)
error_cost
model_boost_10 <- model <- C5.0(train.set[-17],
train.set$default,
trials = 10,
costs = error_cost)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,rules = TRUE)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
model_boost_10 <- model <- C5.0(train.set[-17],train.set$default,trials = 10,rules = FALSE)
#summary(model)
test.predict_10 <- predict(model_boost_10,test.set)
CrossTable(test.set$default,test.predict_10,
dnn =c("Actual Result","Predicted Result"),
prop.r = FALSE,
prop.c = FALSE,
chisq = FALSE )
install.packages("RWeka")
library(RWeka)
library(rpart)
model_rpart <- rpart(default ~ .,data = train.set)
model_rpart <- rpart(default ~ .,data = train.set)
summary(rpart)
model_rpart <- rpart(default ~ .,data = train.set)
summary(model_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
summary(model_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
summary(model_rpart)
plot(model_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# summary(model_rpart)
# plot(model_rpart)
predict_rpart <- predict(model_rpart,test.set)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# summary(model_rpart)
# plot(model_rpart)
predict_rpart <- predict(model_rpart,test.set)
library(gmodels)
CrossTable(test.set$default,predict_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# summary(model_rpart)
# plot(model_rpart)
predict_rpart <- predict(model_rpart,test.set)
predict_rpart
library(gmodels)
#CrossTable(test.set$default,predict_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# summary(model_rpart)
# plot(model_rpart)
printcp(model_rpart)
# predict_rpart <- predict(model_rpart,test.set)
# predict_rpart
# library(gmodels)
#CrossTable(test.set$default,predict_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# summary(model_rpart)
# plot(model_rpart)
printcp(model_rpart)
plotcp(model_rpart)
# predict_rpart <- predict(model_rpart,test.set)
# predict_rpart
# library(gmodels)
#CrossTable(test.set$default,predict_rpart)
model_rpart <- rpart(default ~ .,data = train.set, method = "class")
# plot(model_rpart)
printcp(model_rpart)
plotcp(model_rpart)
summary(model_rpart)
# predict_rpart <- predict(model_rpart,test.set)
# predict_rpart
# library(gmodels)
#CrossTable(test.set$default,predict_rpart)
plot(model_rpart)
plot(model_rpart,uniform = TRUE)
plot(model_rpart,uniform = TRUE, main = "Classification Tree for Credit")
library(rpart)
library(rpart.plot)
model_rpart <- rpart(default ~ .,data = train.set,
method = "class",
rpart.control(cp = 0.01)
# plot(model_rpart)
printcp(model_rpart)
model_rpart <- rpart(default ~ .,data = train.set,
method = "class",
rpart.control(cp = 0.01))
model_rpart <- rpart(default ~ .,data = train.set,
method = "class",
rpart.control(cp = le-04))
model_rpart <- rpart(default ~ .,data = train.set,
method = "class",
rpart.control(cp = 0.01))
model_rpart <- rpart(default ~ .,data = train.set,
method = "class")
# plot(model_rpart)
printcp(model_rpart)
plotcp(model_rpart)
summary(model_rpart)
model_rpart <- rpart(default ~ .,data = train.set,
method = "class")
# plot(model_rpart)
printcp(model_rpart)
# plotcp(model_rpart)
# summary(model_rpart)
model_rpart$cptable
model_rpart$cptable[which.min(model_rpart$cptable)]
model_rpart$cptable[which.min(model_rpart$cptable[,xerror])]
model_rpart$cptable[which.min(model_rpart$cptable[,"xerror"])]
model_rpart <- rpart(default ~ .,data = train.set,
method = "class")
# plot(model_rpart)
printcp(model_rpart)
plotcp(model_rpart)
# summary(model_rpart)
bestcp <- model_rpart$cptable[which.min(model_rpart$cptable[,"xerror"])]
model_rpart <- rpart(default ~ .,data = train.set,
method = "class")
# plot(model_rpart)
printcp(model_rpart)
plotcp(model_rpart)
# summary(model_rpart)
bestcp <- model_rpart$cptable[which.min(model_rpart$cptable[,"xerror"])]
model_prunned <- prune(model_rpart,cp = bestcp)
table(test.set$default,predict(model_prunned,type = "class")
table(test.set$default,predict(model_prunned,type = "class"))
table(train.set$default,predict(model_prunned,type = "class"))
table(test.set$default,predict(model_prunned,newdata = test.set,type = "class"))
table(test.set$default,predict(model_prunned,newdata = test.set,type = "class"))
table(test.set$default,predict(model_prunned,newdata = test.set,type = "class"))
CrossTable(test.set$default,predict(model_prunned,newdata = test.set,type = "class"))
table(test.set$default,predict(model_prunned,newdata = test.set,type = "class"))
CrossTable(test.set$default,predict(model_prunned,newdata = test.set,type = "class"),
dnn = c("Actual","predicted"))
plot(model_prunned)
setwd("~/Google Drive/Gits/DataScience/Models/Mashroom")
library(dplyr)
library(tidyr)
library(tidyverse)
library(tidyverse)
mussrooms <- read_csv("mushrooms.csv")
mussrooms <- read_csv("mushrooms.csv",stringAsFactor= TRUE)
mussrooms <- read_csv("mushrooms.csv",header=TRUE)
mussrooms <- read_csv("mushrooms.csv",header=TRUE,sep=",")
mussrooms <- read.csv("mushrooms.csv",header=TRUE,sep=",")
mussrooms <- read.csv("mushrooms.csv",header=TRUE,sep=",")
summary(mussrooms)
mussrooms <- read.csv("mushrooms.csv",header=TRUE,sep=",")
summary(mussrooms)
View(mussrooms)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
sample.size
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
table(test.set,train.set)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
table(test.set$type,train.set$type)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
table(train.set$type)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
table(train.set$type)
table(test.set$type)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
prop.table(table(train.set$type))
table(test.set$type)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
prop.table(table(train.set$type))
prop.table(table(test.set$type))
set.seed(2017)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
prop.table(table(train.set$type))
prop.table(table(test.set$type))
set.seed(2000)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
prop.table(table(train.set$type))
prop.table(table(test.set$type))
library(C50)
model.c50 <- C5.0(type ~ ., data = train.set)
model.c50 <- C5.0(type ~ ., data = train.set)
summary(model.c50)
# veil_type has only one value hence removing it
mussrooms <- mussrooms[,-"veil_type"]
# veil_type has only one value hence removing it
mussrooms <- mussrooms[,-veil_type]
# veil_type has only one value hence removing it
mussrooms <- mussrooms[,veil_type]
# veil_type has only one value hence removing it
mussrooms <- mussrooms[,"veil_type"]
set.seed(2000)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
# veil_type has only one value hence removing it
mussrooms <- mussrooms[-"veil_type"]
# veil_type has only one value hence removing it
mussrooms <- subset[mussrooms,select = -("veil_type")]
# veil_type has only one value hence removing it
mussrooms <- subset[mussrooms,select = -(veil_type)]
# veil_type has only one value hence removing it
mussrooms <- subset[mussrooms,select = -(veil_type)]
# veil_type has only one value hence removing it
mussrooms <- subset(mussrooms,select = -(veil_type))
mussrooms <- read.csv("mushrooms.csv",header=TRUE,sep=",")
summary(mussrooms)
# veil_type has only one value hence removing it
mussrooms <- subset(mussrooms,select = -(veil_type))
set.seed(2000)
sample.size <- sample(nrow(mussrooms),round(nrow(mussrooms) * 0.8))
train.set <- mussrooms[sample.size,]
test.set <- mussrooms[-sample.size,]
prop.table(table(train.set$type))
prop.table(table(test.set$type))
model.c50 <- C5.0(type ~ ., data = train.set)
summary(model.c50)
predict.C5.0(model.c50,newdata = test.set)
library(gmodels)
CrossTable(test.set$type,predict.C5.0(model.c50,newdata = test.set))
library(gmodels)
CrossTable(test.set$type,predict.C5.0(model.c50,newdata = test.set))
plot(model.c50)
library(gmodels)
CrossTable(test.set$type,predict.C5.0(model.c50,newdata = test.set))
plot(model.c50,type = 3)
model.c50 <- C5.0(type ~ ., data = train.set,trials = 10)
summary(model.c50)
library(gmodels)
CrossTable(test.set$type,predict.C5.0(model.c50,newdata = test.set))
plot(model.c50,type = 3)
library(gmodels)
CrossTable(test.set$type,predict.C5.0(model.c50,newdata = test.set),
chisq = FALSE,prop.r = FALSE,prop.t = FALSE,
dnn = c("Actual","Predicted"))
plot(model.c50)
plot(model.c50,trial = 1)
